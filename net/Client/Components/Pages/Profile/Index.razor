@page "/profile"
@using System.Security.Claims
@using DTOs
@rendermode InteractiveServer
@inject IUserService HttpUserService
@attribute [Authorize(Roles = "JobSeeker, JobProvider")]

<PageTitle>Profile</PageTitle>

<div class="container py-5">
    <h1>Your Profile</h1>
    <h5>You can update or view your information</h5>

    @if (Model is null)
    {
        <Loading />
    }
    else
    {
        <EditForm Model="Model" OnValidSubmit="UpdateProfileAsync" FormName="ProfileForm">
            <DataAnnotationsValidator/>

            @if (!string.IsNullOrEmpty(error))
            {
                <Alert AlertType="Alert.Type.Danger">@error</Alert>
            }
            @if (!string.IsNullOrEmpty(success))
            {
                <Alert AlertType="Alert.Type.Success">@success</Alert>
            }
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" type="email" required class="form-control" @bind-Value="Model.Email"/>
                <ValidationMessage For="() => Model.Email" class="small text-danger"/>
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <div class="input-group mb-3">
                    <InputText id="password" class="form-control" type="@GetInputType()" required @bind-Value="Model.Password"/>
                    <label class="btn btn-outline-secondary">
                        <i class="bi bi-eye@(showPassword ? "-slash" : "")"></i>
                        <input type="checkbox" class="btn-check" id="btn-check-4" autocomplete="off" @onchange="TogglePasswordVisibility">
                    </label>
                </div>
                <ValidationMessage For="() => Model.Password" class="small text-danger"/>
            </div>
            <div class="mb-3">
                <label for="phoneNumber" class="form-label">Phone Number:</label>
                <InputText id="phoneNumber" class="form-control" @bind-Value="Model.PhoneNumber"/>
                <ValidationMessage For="() => Model.PhoneNumber" class="small text-danger"/>
            </div>
            @if (Model.Role == "JobSeeker")
            {
                <div class="mb-3">
                    <label for="firstName" class="form-label">First Name:</label>
                    <InputText id="firstName" class="form-control" required @bind-Value="Model.FirstName"/>
                    <ValidationMessage For="() => Model.FirstName" class="small text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="lastName" class="form-label">Last Name:</label>
                    <InputText id="lastName" class="form-control" required @bind-Value="Model.LastName"/>
                    <ValidationMessage For="() => Model.LastName" class="small text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="resume" class="form-label">Resume:</label>
                    <InputTextArea id="resume" class="form-control" required @bind-Value="Model.Resume"></InputTextArea>
                    <ValidationMessage For="() => Model.Resume" class="small text-danger"/>
                </div>
            }
            else if (Model.Role == "JobProvider")
            {
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" class="form-control" required @bind-Value="Model.Name"/>
                    <ValidationMessage For="() => Model.Name" class="small text-danger"/>
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" class="form-control" required @bind-Value="Model.Description"/>
                    <ValidationMessage For="() => Model.Description" class="small text-danger"/>
                </div>
            }
            <button type="submit" class="btn btn-primary">Save Changes</button>
        </EditForm>
    }
</div>
@code {
    [SupplyParameterFromForm] private UserDto? Model { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }

    private string? error;
    private string? success;
    private bool showPassword = false;
    
    private void TogglePasswordVisibility() { showPassword = !showPassword; }
    private string GetInputType() { return showPassword ? "text" : "password"; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (authenticationState is null) return;
            var authState = await authenticationState;
            var userAuth = authState?.User;
            if (userAuth is null) return;

            var userId = int.Parse(userAuth.FindFirstValue(ClaimTypes.NameIdentifier) ?? "");
            Model = await HttpUserService.GetUserByIdAsync(userId);

            error = null;
        }
        catch (Exception e)
        {
            error = e.Message;
        }
    }

    private async Task UpdateProfileAsync()
    {
        try
        {
            await HttpUserService.UpdateUserAsync(Model);
            success = "Profile updated";
            error = null;
        }
        catch (Exception e)
        {
            success = null;
            error = e.Message;
        }
    }
}