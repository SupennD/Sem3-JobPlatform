@page "/jobs"
@using DTOs
@rendermode InteractiveServer
@inject IJobService HttpJobService

<PageTitle>Student jobs - Jobz</PageTitle>

<div class="py-3 bg-primary-subtle border-top border-primary border-opacity-25">
    <form @onsubmit="GetJobsAsync" class="container">
        <div class="row">
            <div class="col-md-4">
                <input @bind="query" type="search" id="search" name="query" placeholder="Search query (e.g., Software developer)" class="form-control form-control-lg border-0" />
            </div>
            <div class="col-md-2">
                <input @bind="minSalary" type="number" step="1" placeholder="Min Salary" class="form-control form-control-lg border-0" />
            </div>
            <div class="col-md-2">
                <input @bind="maxSalary" type="number" step="1" placeholder="Max Salary" class="form-control form-control-lg border-0" />
            </div>
            <div class="col-md-2">
                <input @bind="location" type="text" placeholder="Location" class="form-control form-control-lg border-0" />
            </div>
            <div class="col-md-2">
                <select @bind="employmentType" class="form-select form-select-lg border-white">
                    <option value="" selected>All Types</option>
                    <option value="FullTime">Full Time</option>
                    <option value="PartTime">Part Time</option>
                    <option value="Internship">Internship</option>
                </select>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col text-end">
                <button type="submit" class="btn btn-lg btn-primary">
                    Search Jobs
                </button>
                <button type="button" class="btn btn-lg btn-secondary ms-2" @onclick="ResetFiltersAsync">
                    Reset
                </button>
            </div>
        </div>
    </form>
</div>

<div class="container py-3">
    <h1 class="mb-3 fs-3">We found <strong>@totalSize</strong> jobs for you</h1>

    @if (!string.IsNullOrEmpty(error))
    {
        <Alert AlertType="Alert.Type.Danger">@error</Alert>
    }
    else if (jobs is null)
    {
        <Loading />
    }
    else if (totalSize == 0)
    {
        <p>There are no available jobs matching your criteria at the moment :(</p>
    }
    else
    {
        <div class="vstack align-items-center gap-3">
            @foreach (var job in jobs)
            {
                <NavLink href="@($"jobs/{job.Id}")" class="vstack align-items-start col p-3 border rounded-3 gap-2 text-decoration-none text-body">
                    <small class="text-body-secondary">
                        @job.PostingDate.ToString("dd MMM. yyyy")
                        <span> / </span>
                        @job.Deadline.ToString("dd MMM. yyyy")
                    </small>
                    <h2 class="m-0 fs-3 fw-semibold">@job.Title</h2>
                    <div class="fw-medium">Bla bla company</div>
                    <div class="text-secondary">@job.Location</div>
                    <div class="hstack gap-2">
                        <div class="badge fs-6 fw-normal bg-info-subtle text-info-emphasis rounded-pill">@job.Type</div>
                        <div class="badge fs-6 fw-normal bg-warning-subtle text-warning-emphasis rounded-pill">@job.Salary.ToString("C") / month</div>
                    </div>
                </NavLink>
            }
            @if (!string.IsNullOrEmpty(nextPageToken))
            {
                <div class="hstack justify-content-between align-items-center">
                    <span>Page @(int.TryParse(nextPageToken, out var result) ? result : 1)</span>
                    <button class="btn btn-secondary @(string.IsNullOrEmpty(nextPageToken) ? "disabled" : "")" @onclick="NextPageAsync">Next page</button>
                </div>
            }
        </div>
    }
</div>

@code {
    private IEnumerable<JobDto>? jobs;
    private int pageSize = 12;
    private string? nextPageToken;
    private long totalSize;
    private string? error;

    private string? query;
    private double? minSalary;
    private double? maxSalary;
    private string? location;
    private string? employmentType;

    protected override async Task OnInitializedAsync()
    {
        await GetJobsAsync();
    }

    private async Task GetJobsAsync()
    {
        // TODO: check why the list does not render on first search
        try
        {
            var filter = BuildFilter();
            var response = await HttpJobService.GetJobsAsync(nextPageToken ?? "", pageSize, filter);
            jobs = response.Data;
            nextPageToken = response.NextPageToken;
            totalSize = response.TotalSize;
            error = null;
        }
        catch (Exception e)
        {
            error = e.Message;
            jobs = null;
        }
    }

    private async Task NextPageAsync()
    {
        if (!string.IsNullOrEmpty(nextPageToken))
        {
            await GetJobsAsync();
        }
    }

    private string BuildFilter()
    {
        var filters = new List<string>();

        if (!string.IsNullOrEmpty(query))
            filters.Add($"(title=='^*{query}*' or description=='^*{query}*')");

        if (minSalary.HasValue)
            filters.Add($"salary=ge={minSalary}");

        if (maxSalary.HasValue)
            filters.Add($"salary=le={maxSalary}");

        if (!string.IsNullOrEmpty(location))
            filters.Add($"location=='^*{location}*'");

        if (!string.IsNullOrEmpty(employmentType))
            filters.Add($"type=='{employmentType}'");
        
        return string.Join(" and ", filters);
    }

    private async Task ResetFiltersAsync()
    {
        query = null;
        minSalary = null;
        maxSalary = null;
        location = null;
        employmentType = null;
        nextPageToken = null;
        await GetJobsAsync();
    }
}
