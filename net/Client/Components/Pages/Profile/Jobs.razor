@page "/profile/jobs"
@using System.Security.Claims
@using DTOs
@using Microsoft.AspNetCore.Components.QuickGrid
@rendermode InteractiveServer
@inject IJobService HttpJobService
@attribute [Authorize(Roles = "JobProvider")]


<div class="container py-3">
    @if (!string.IsNullOrEmpty(_error))
    {
        <Alert AlertType="Alert.Type.Danger">@_error</Alert>
    }
    else
    {
        <div class="d-flex align-items-center justify-content-between mb-3">
            @if (_paginationState.TotalItemCount.HasValue)
            {
                <h1 class="fs-3">You have <strong>@_paginationState.TotalItemCount</strong> jobs</h1>
            }
            
            <NavLink href="profile/jobs/create" class="btn btn-primary">Add new job</NavLink>
        </div>

        <QuickGrid ItemsProvider="_jobsProvider" Pagination="_paginationState" Class="table table-bordered table-responsive table-striped">
            <PropertyColumn Property="@(job => job.Title)" Title="Job Title" />
            <PropertyColumn Property="@(job => job.PostingDate)" Format="yyyy-MM-dd" Title="Posted On" />
            <PropertyColumn Property="@(job => job.Deadline)" Format="yyyy-MM-dd" Title="Deadline" />
            <PropertyColumn Property="@(job => job.Location)" Title="Location" />
            <PropertyColumn Property="@(job => job.Salary)" Title="Salary" />
            <PropertyColumn Property="@(job => job.Type)" Title="Type" />
            <PropertyColumn Property="@(job => job.Status)" Title="Status" />
            <TemplateColumn Title="Actions">
                <NavLink href="@($"/jobs/{context.Id}")">View</NavLink>
            </TemplateColumn>
        </QuickGrid>
        <Pagination State="_paginationState" />
    }
</div>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private GridItemsProvider<JobDto>? _jobsProvider;
    private readonly PaginationState _paginationState = new()
    {
        ItemsPerPage = 12
    };
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is authenticated
        if (AuthenticationState is null) return;
        var authState = await AuthenticationState;
        var user = authState?.User;
        if (user?.Identity is null || !user.Identity.IsAuthenticated) return;

        // Get the user's id and role
        var userId = user.FindFirstValue(ClaimTypes.NameIdentifier)!;
        var userRole = user.FindFirstValue(ClaimTypes.Role)!;
        
        _jobsProvider = async _ =>
        {
            try
            {
                // An RSQL filter is used to get applications for the logged in user.
                var filter = userRole switch
                {
                    "JobProvider" => $"jobProvider.id=={userId}",
                    _ => throw new Exception("You don't have the required permissions.")
                };

                var response = await HttpJobService.GetJobsAsync(
                    pageToken: _paginationState.CurrentPageIndex.ToString(),
                    pageSize: _paginationState.ItemsPerPage,
                    filter);

                return GridItemsProviderResult.From(response.Data.ToList(), Convert.ToInt32(response.TotalSize));
            }
            catch (Exception e)
            {
                _error = e.Message;
            }

            // In case of errors return an empty list of items
            return GridItemsProviderResult.From(new List<JobDto>(), 0);
        };

        // Re-render the page when total item count changes
        _paginationState.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();
    }
}