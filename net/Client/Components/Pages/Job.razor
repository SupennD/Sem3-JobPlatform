@page "/jobs/{id:long}"
@using System.Security.Claims
@using DTOs
@inject IJobService HttpJobService
@inject IApplicationService HttpApplicationService

<PageTitle>@(job is null ? "Not found" : job.Title) - Jobz</PageTitle>

<div class="container py-5">
    @if (!string.IsNullOrEmpty(success))
    {
        <Alert AlertType="Alert.Type.Success">@success</Alert>
    }
    @if (!string.IsNullOrEmpty(error))
    {
        <Alert AlertType="Alert.Type.Danger">@error</Alert>
    }
    else if (job is null)
    {
        <Loading/>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">@job.Title</h2>
                <h5 class="card-subtitle mb-2 text-body-secondary">
                    <span>@job.JobProvider.Name</span>
                    <span>, @job.JobProvider.Email</span>
                    <span>, @job.JobProvider.PhoneNumber</span>
                </h5>
                <p class="card-text">@job.Description</p>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item"><strong>Posting Date:</strong> @job.PostingDate.ToString("dd MMM. yyyy")</li>
                <li class="list-group-item"><strong>Deadline:</strong> @job.Deadline.ToString("dd MMM. yyyy")</li>
                <li class="list-group-item"><strong>Location:</strong> @job.Location</li>
                <li class="list-group-item"><strong>Salary:</strong> @job.Salary.ToString("C") / month</li>
                <li class="list-group-item"><strong>Type:</strong> @job.Type</li>
                <li class="list-group-item">
                    <AuthorizeView Roles="JobProvider">
                        <Authorized>
                            @if (_currentUserId is null || _currentUserId != job.JobProvider.Id)
                            {
                                <strong>Status: </strong>@job.Status
                            }
                            else
                            {
                                <label for="status"><strong>Status: </strong></label>
                                <select @bind="job.Status" @bind:after="UpdateJobStatusAsync" id="status" class="form-select">
                                    <option value="Active" selected="@job.Status.Equals("Active")">Active</option>
                                    <option value="Closed" selected="@job.Status.Equals("Closed")">Closed</option>
                                </select>
                            }
                        </Authorized>
                        <NotAuthorized>
                            <strong>Status: </strong>@job.Status
                        </NotAuthorized>
                    </AuthorizeView>
                </li>
            </ul>
            <div class="card-body">
                <a href="/jobs" class="btn btn-outline-secondary mt-3">Back to Jobs</a>
                <AuthorizeView Roles="JobSeeker">
                    <Authorized>
                        <button class="btn btn-primary mt-3" @onclick="ApplyToJobAsync" disabled="@(!string.IsNullOrEmpty(success))">
                            Apply for this Job
                        </button>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    [Parameter] public long Id { get; set; }

    private JobDto? job;
    private long? _currentUserId;
    private string? success;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState!;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                var userId = user.FindFirstValue(ClaimTypes.NameIdentifier)!;
                _currentUserId = long.TryParse(userId, out var id) ? id : null;
            }
        }

        try
        {
            job = await HttpJobService.GetJobAsync(Id);
        }
        catch (Exception exception)
        {
            error = exception.Message;
        }
    }

    private async Task ApplyToJobAsync()
    {
        try
        {
            error = null;

            await HttpApplicationService.CreateJobApplicationAsync(new CreateJobApplicationDto()
            {
                JobId = Id,
                JobSeekerId = _currentUserId ?? throw new Exception("An error occurred, try to log out and log in again.")
            });

            success = "Applied for job successfully.";
        }
        catch (Exception ex)
        {
            success = null;
            error = ex.Message;
        }
    }

    private async Task UpdateJobStatusAsync()
    {
        try
        {
            error = null;

            if (_currentUserId is null || _currentUserId != job.JobProvider.Id)
            {
                throw new Exception("You are not allowed to perform this action.");
            }

            await HttpJobService.UpdateJobAsync(Id, new UpdateJobDto()
            {
                Status = job?.Status ?? ""
            });

            success = "The status updated successfully.";
        }
        catch (Exception e)
        {
            success = null;
            error = e.Message;
        }
    }
}