@page "/"
@using Client.Components.Service
@using DTOs
@rendermode InteractiveServer
@inject IJobService HttpJobService

<PageTitle>Jobs</PageTitle>

<h1>Hello, There!</h1>

See the job list.


@if (!string.IsNullOrEmpty(error))
   {
       <div class="alert alert-danger">@error</div>
   }
else if (jobs == null)
{
    <p>Loading...</p>
}else
{ 
    <div class="d-grid gap-3">
        @foreach (var job in jobs)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-body">
                        <h3 class="card-title">@job.Title</h3>
                        <p class="card-text">@job.Description</p>
                        <ul class="list-styled">
                            <li><strong>Salary:</strong> $@job.Salary</li>
                            <li><strong>Employment Type:</strong> @job.Type</li>
                            <li><strong>Application Deadline:</strong> @job.Deadline</li>
                            <li><strong>Location:</strong> @job.Location</li>
                        </ul>
                    </div>
                    <div class="card-footer">
                        <p>Needed in @job.Location</p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<JobDto>? jobs;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            jobs = await HttpJobService.GetAllJobsAsync();
        }
        catch (Exception e)
        {
            error = $"An error occurred while loading jobs: {e.Message}";
        }
    }
}