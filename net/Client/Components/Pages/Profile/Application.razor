@page "/profile/applications/{id:int}"
@using DTOs
@inject IApplicationService ApplicationService

<PageTitle>Application - Jobz</PageTitle>

<div class="container py-5">
    @if (!string.IsNullOrEmpty(error))
    {
        <Alert AlertType="Alert.Type.Danger">@error</Alert>
    }
    else if (application is null)
    {
        <Loading />
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">@application.Id's Application</h2>
                <h5 class="card-subtitle mb-2 text-muted">For Job: @application.JobId</h5>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item"><strong>Email:</strong> @application.JobSeekerId</li>
                    <li class="list-group-item"><strong>Status:</strong> 
                        <span class="badge @(application.Status == "Approved" ? "bg-success" : application.Status == "Declined" ? "bg-danger" : "bg-secondary")">
                            @application.Status
                        </span>
                    </li>
                    <li class="list-group-item"><strong>Submission Date:</strong> @application.ApplicationDate.ToString("dd MMM. yyyy")</li>
                </ul>
                <AuthorizeView Roles="JobProvider">
                    <Authorized>
                        <div class="mt-3">
                            <button class="btn btn-success me-2" @onclick="@(() => UpdateStatus("Approved"))">Approve</button>
                            <button class="btn btn-danger me-2" @onclick="@(() => UpdateStatus("Declined"))">Decline</button>
                            <button class="btn btn-secondary" @onclick="@(() => UpdateStatus("InProgress"))">Reset Status</button>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private JobApplicationDto? application;
    private string? error;
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (AuthenticationState is null) return;
            var authState = await AuthenticationState;
            var user = authState?.User;
            if (user?.Identity is null) return;
            
            var response = await ApplicationService.GetApplicationAsync(Id);
            application = response.Data;
        }
        catch (Exception exception)
        {
            error = exception.Message;
        }
    }
    
    private async Task UpdateStatus(string newStatus)
    {
        try
        {
            if (application != null)
            {
                application.Status = newStatus;
                await ApplicationService.UpdateApplicationAsync(application);
            }
        }
        catch (Exception exception)
        {
            error = exception.Message;
        }
    }
    
}