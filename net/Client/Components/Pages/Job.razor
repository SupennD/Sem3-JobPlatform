@page "/jobs/{id:int}"
@using DTOs
@inject IJobService JobService

<PageTitle>@(job is null ? "Not found" : job.Title) - Jobz</PageTitle>

<div class="container py-5">
    @if (!string.IsNullOrEmpty(error))
    {
        <Alert AlertType="Alert.Type.Danger">@error</Alert>
    }
    else if (job is null)
    {
        <Loading />
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">@job.Title</h2>
                <h5 class="card-subtitle mb-2 text-muted">Example Company</h5>
                <p class="card-text">@job.Description</p>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item"><strong>Location:</strong> @job.Location</li>
                    <li class="list-group-item"><strong>Type:</strong> @job.Type</li>
                    <li class="list-group-item"><strong>Salary:</strong> @job.Salary.ToString("C") / month</li>
                    <li class="list-group-item"><strong>Posting Date:</strong> @job.PostingDate.ToString("dd MMM. yyyy")</li>
                    <li class="list-group-item"><strong>Deadline:</strong> @job.Deadline.ToString("dd MMM. yyyy")</li>
                </ul>
                <a href="/jobs" class="btn btn-primary mt-3">Back to Jobs</a>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private JobDto? job;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await JobService.GetJobAsync(Id);
            job = response.Data;
        }
        catch (Exception exception)
        {
            error = exception.Message;
        }
    }
}
