@page "/jobs/{id:int}"
@using DTOs
@inject IJobService JobService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@(job is null ? "Not found" : job.Title) - Jobz</PageTitle>

<div class="container py-5">
    @if (!string.IsNullOrEmpty(success))
    {
    <Alert AlertType="Alert.Type.Success">@success</Alert>
    }
    @if (!string.IsNullOrEmpty(error))
    {
    <Alert AlertType="Alert.Type.Danger">@error</Alert>
    }
    else if (job is null)
    {
    <Loading/>
    }
    else
    {
    <div class="card">
        <div class="card-body">
            <h2 class="card-title">@job.Title</h2>
            <h5 class="card-subtitle mb-2 text-muted">Example Company</h5>
            <p class="card-text">@job.Description</p>
            <ul class="list-group list-group-flush">
                <li class="list-group-item"><strong>Location:</strong> @job.Location</li>
                <li class="list-group-item"><strong>Type:</strong> @job.Type</li>
                <li class="list-group-item"><strong>Salary:</strong> @job.Salary.ToString("C") / month</li>
                <li class="list-group-item"><strong>Posting Date:</strong> @job.PostingDate.ToString("dd MMM. yyyy")</li>
                <li class="list-group-item"><strong>Deadline:</strong> @job.Deadline.ToString("dd MMM. yyyy")</li>
            </ul>
            <a href="/jobs" class="btn btn-primary mt-3">Back to Jobs</a>
            <button class="btn btn-success mt-3" @onclick="ApplyToJob" disabled="@(!string.IsNullOrEmpty(success))">Apply for this Job</button>
        </div>
    </div>
    }
</div>

@code {
[Parameter]
public int Id { get; set; }

private JobDto? job;
private string? success;
private string? error;

protected override async Task OnInitializedAsync()
{
try
{
var response = await JobService.GetJobAsync(Id);
job = response.Data;
}
catch (Exception exception)
{
error = exception.Message;
}
}

private async Task ApplyToJob()
{
try
{
error = null;

var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
var user = authState.User;

if (!user.Identity.IsAuthenticated)
{
error = "You must be logged in to apply for a job.";
return;
}

long userId = 1; // TODO: AUTH USER ID

var applyJobRequest = new JobApplicationDto()
{
JobId = Id,
JobSeekerId = userId
};

await JobService.ApplyJobAsync(Id, applyJobRequest);
success = "Applied for job successfully.";
}
catch (Exception ex)
{
success = null;
error = ex.Message;
}
}
}