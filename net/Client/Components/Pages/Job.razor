@page "/jobs/{id:int}"
@using System.Security.Claims
@using DTOs
@inject IJobService HttpJobService
@inject IApplicationService HttpApplicationService

<PageTitle>@(job is null ? "Not found" : job.Title) - Jobz</PageTitle>

<div class="container py-5">
    @if (!string.IsNullOrEmpty(success))
    {
        <Alert AlertType="Alert.Type.Success">@success</Alert>
    }
    @if (!string.IsNullOrEmpty(error))
    {
        <Alert AlertType="Alert.Type.Danger">@error</Alert>
    }
    else if (job is null)
    {
        <Loading/>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <h2 class="card-title">@job.Title</h2>
                <h5 class="card-subtitle mb-2 text-muted">Example Company</h5>
                <p class="card-text">@job.Description</p>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item"><strong>Location:</strong> @job.Location</li>
                    <li class="list-group-item"><strong>Type:</strong> @job.Type</li>
                    <li class="list-group-item"><strong>Salary:</strong> @job.Salary.ToString("C") / month</li>
                    <li class="list-group-item"><strong>Posting Date:</strong> @job.PostingDate.ToString("dd MMM. yyyy")
                    </li>
                    <li class="list-group-item"><strong>Deadline:</strong> @job.Deadline.ToString("dd MMM. yyyy")</li>
                </ul>
                <a href="/jobs" class="btn btn-primary mt-3">Back to Jobs</a>
                <button class="btn btn-success mt-3" @onclick="ApplyToJobAsync" disabled="@(!string.IsNullOrEmpty(success))">
                    Apply for this Job
                </button>
            </div>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    [Parameter] public int Id { get; set; }

    private JobDto? job;
    private string? success;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            job = await HttpJobService.GetJobAsync(Id);
        }
        catch (Exception exception)
        {
            error = exception.Message;
        }
    }

    private async Task ApplyToJobAsync()
    {
        try
        {
            error = null;

            // Check if user is authenticated
            if (AuthenticationState is null) throw new Exception("You must first log in.");
            var authState = await AuthenticationState;
            var user = authState?.User;
            if (user?.Identity is null || !user.Identity.IsAuthenticated) throw new Exception("You must first log in.");
            var jobSeekerId = user.FindFirstValue(ClaimTypes.NameIdentifier)!;

            await HttpApplicationService.CreateJobApplicationAsync(new CreateJobApplicationDto()
            {
                JobId = Id,
                JobSeekerId = long.Parse(jobSeekerId)
            });

            success = "Applied for job successfully.";
        }
        catch (FormatException)
        {
            success = null;
            error = "An error occurred, try to log out and log in again.";
        }
        catch (Exception ex)
        {
            success = null;
            error = ex.Message;
        }
    }
}